#!/usr/bin/python3

# Copyright (C) 2019 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import json
import os
import pprint
import sys
import tempfile
import time

import clickreviews.common as common
from clickreviews.common import (
    cmd,
    debug,
    warn,
    error,
)


def help():
    print('''Usage:
$ %s SNAP1 SNAP2 ...
''' % os.path.basename(sys.argv[0]))


def main():
    parser = argparse.ArgumentParser(
        prog='check-notices',
        description='Check a snap for needed security notices'
    )
    parser.add_argument('--no-fetch', help='use existing security db',
                        action='store_true')
    parser.add_argument('--with-cves', help='show referenced cves',
                        action='store_true')
    (args, argv) = parser.parse_known_args()

    common.REPORT_OUTPUT = "console"

    # initialize variables
    if 'SNAP_USER_COMMON' not in os.environ:
        os.environ['SNAP_USER_COMMON'] = "%s/snap/review-tools/common" % \
            os.environ['HOME']
        debug("SNAP_USER_COMMON not set. Defaulting to %s" %
              os.environ['SNAP_USER_COMMON'])

    usndb = "database.json"
    if 'SNAP' in os.environ:
        fetchdb = "%s/bin/fetch-db" % os.environ['SNAP']
        available = "%s/bin/snap-updates-available" % os.environ['SNAP']
    else:
        fetchdb = "review-tools.fetch-usn-db"
        available = "review-tools.updates-available"
        debug("SNAP not set. Defaulting to 'review-tools.*'")

    curdir = os.getcwd()
    os.chdir(os.environ['SNAP_USER_COMMON'])

    # download the usndb
    update_interval = 60 * 60 * 24  # one day
    if not os.path.exists("./" + usndb) or \
            (not args.no_fetch and
             time.time() - os.path.getmtime("./" + usndb) >= update_interval):
        rc, out = cmd([fetchdb, "%s.bz2" % usndb])
        if rc != 0:
            error(out)
    else:
        debug("Reusing %s" % usndb)

    os.chdir(curdir)

    reports = dict()
    had_debug = None
    if 'SNAP_DEBUG' in os.environ:
        had_debug = os.environ['SNAP_DEBUG']

    for pkg in argv:
        if not os.path.isfile(pkg):
            warn("Skipping '%s', not a regular file" % pkg)
            continue

        snap = os.path.basename(pkg).split('_')[0]
        rev = "unknown"
        if '_' in pkg:
            rev = os.path.basename(pkg).split('_')[1].split(".")[0]

        if snap in reports and rev in reports[snap]:
            debug("Skipping %s with revision %s" % (snap, rev))
            continue

        cmd_args = ['--usn-db=%s' %
                    os.path.join(os.environ['SNAP_USER_COMMON'], usndb),
                    '--snap=%s' % os.path.abspath(pkg)]
        if args.with_cves:
            cmd_args.append('--with-cves')

        # this carries through to available
        if had_debug is not None:
            os.unsetenv('SNAP_DEBUG')
        rc, out = cmd([available] + cmd_args)
        if had_debug is not None:
            os.environ['SNAP_DEBUG'] = had_debug

        if rc != 0:
            warn(out)
            continue

        if snap not in reports:
            reports[snap] = dict()
        if out == '':
            reports[snap][rev] = dict()
        else:
            reports[snap][rev] = json.loads(out.replace("'", '"'))

    pprint.pprint(reports)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Aborted.")
        sys.exit(1)
