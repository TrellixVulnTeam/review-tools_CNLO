#!/usr/bin/python3

import argparse
import json
import yaml
import sys

from reviewtools.common import read_snapd_base_declaration

decl = {}
printed_review_header = False
base_decl_series, base_decl = read_snapd_base_declaration()


def _verify_interface(iface):
    found = False
    if "slots" in base_decl and iface in base_decl["slots"]:
        found = True
    elif "plugs" in base_decl and iface in base_decl["plugs"]:
        found = True

    return found


def print_decl(interfaces=[], output_json=False):
    if len(interfaces) == 0:
        if output_json:
            print(json.dumps(base_decl, sort_keys=True, indent=2))
        else:
            print(yaml.dump(base_decl, indent=2))
    else:
        interfaces.sort()
        for side in ["plugs", "slots"]:
            # first pass to see if ok
            for i in interfaces:
                if not _verify_interface(i):
                    raise Exception("Invalid interface '%s'" % i)

        subdecl = {}
        for side in ["plugs", "slots"]:
            for i in interfaces:
                if i in base_decl[side]:
                    if side not in subdecl:
                        subdecl[side] = {}
                    subdecl[side][i] = base_decl[side][i]

        if output_json:
            print(json.dumps(subdecl, sort_keys=True, indent=2))
        else:
            print(yaml.dump(subdecl, indent=2))


def main():
    parser = argparse.ArgumentParser(
        prog="get-base-declaration",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Output base declaration from the review-tools",
    )
    parser.add_argument(
        "-i", "--interfaces", type=str, help="list of interfaces to allow connection"
    )
    parser.add_argument(
        "--json", help="output json", action="store_true"
    )
    args = parser.parse_args()

    if args.interfaces:
        print_decl(interfaces=args.interfaces.split(","), output_json=args.json)
    else:
        print_decl(output_json=args.json)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Aborted.")
        sys.exit(1)
