#!/usr/bin/python3

from clickreviews import modules
import argparse
import json
import sys


def print_findings(which, kind):
    '''
    Print a summary of the issues found.
    '''

    if not which:
        return ''
    print(kind)
    print(''.center(len(kind), '-'))
    for key in which.keys():
        print(' - %s' % key)
        print('\t%s' % which[key]['text'])
        if 'link' in which[key]:
            print('\t%s' % which[key]['link'])


def report(results, args):
    errors = {}
    warnings = {}
    info = {}

    for module in results:
        for key in results[module]['error']:
            errors[key] = results[module]['error'][key]
        for key in results[module]['warn']:
            warnings[key] = results[module]['warn'][key]
        if args.verbose:
            for key in results[module]['info']:
                info[key] = results[module]['info'][key]

    if not args.json:
        print_findings(errors, 'Errors')
        print_findings(warnings, 'Warnings')
        if args.verbose:
            print_findings(info, 'Info')
        if warnings or errors:
            print('%s: FAIL' % args.filename)
        else:
            print('%s: pass' % args.filename)
    else:
        print(json.dumps(results, sort_keys=True, indent=2,
                         separators=(',', ': ')))
    if warnings or errors:
        return 1
    return 0


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', type=str,
                        help='.click file to be inspected')
    parser.add_argument('-v', '--verbose', help='increase output verbosity',
                        action='store_true')
    parser.add_argument('--json', help='print json output',
                        action='store_true')
    args = parser.parse_args()
    click_file = args.filename

    # What we are doing here is basically what all the
    # ./bin/click-check-* scripts do as well, so for
    # example something like:
    #
    #     review = cr_push_helper.ClickReviewPushHelper(sys.argv[1])
    #     review.do_checks()
    #     rc = review.do_report()
    #
    results = {}
    cr_modules = modules.get_modules()
    if not cr_modules:
        print("No 'clickreviews' modules found.")
        sys.exit(1)
    for module in cr_modules:
        review = modules.init_main_class(module, click_file)
        review.do_checks()
        results[module.replace('cr_', '')] = review.click_report
    rc = report(results, args)
    sys.exit(rc)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Aborted.")
        sys.exit(1)
