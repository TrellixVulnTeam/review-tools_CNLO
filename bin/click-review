#!/usr/bin/python3

import imp
import inspect
import pkgutil
import sys


def init_main_class(module_name, click_file):
    module = imp.load_source(module_name,
                             'clickreviews/%s.py' % module_name)

    classes = inspect.getmembers(module, inspect.isclass)
    find_main_class = lambda a: a[0].startswith('Click') and \
        not a[0].endswith('Exception') and \
        a[1].__module__ == module_name
    main_class = list(filter(find_main_class, classes))
    init_object = getattr(module, main_class[0][0])
    return init_object(click_file)


def report(which, kind):
    if not which:
        return ''
    print(kind)
    print(''.center(len(kind), '-'))
    for key in which.keys():
        print(' - %s' % key)
        print('\t%s' % which[key]['text'])
        if 'link' in which[key]:
            print('\t%s' % which[key]['link'])


def main():
    if len(sys.argv) == 1:
        print("Usage: %s <path to .click file>" % sys.argv[0])
        sys.exit(1)
    click_file = sys.argv[1]
    errors = {}
    warnings = {}
    all_modules = [name for _, name, _ in
                   pkgutil.iter_modules(['clickreviews'])]
    narrow_down_modules = \
        lambda a: a.startswith('cr_') and \
        a not in ['cr_common', 'cr_tests', 'cr_skeleton']
    modules = list(filter(narrow_down_modules, all_modules))

    for module in modules:
        review = init_main_class(module, click_file)
        review.do_checks()
        results = review.click_report
        for key in results['error'].keys():
            errors[key] = results['error'][key]
        for key in results['warn'].keys():
            warnings[key] = results['warn'][key]
    if not warnings and not errors:
        print('Passed!')
        sys.exit(0)
    report(errors, 'Errors')
    report(warnings, 'Warnings')


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Aborted.")
        sys.exit(1)
