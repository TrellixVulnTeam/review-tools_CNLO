#!/usr/bin/python3

# Repack a click package by using lowlevel tools so as not to change anything
# in the package (ie, don't use 'click build .' to avoid updating DEBIAN/, etc)

import sys
import os

# Support running from the build tree.
sys.path.insert(0, os.path.join(sys.path[0], os.pardir))

from clickreviews import cr_common
from debian.deb822 import Deb822
import glob
import shutil
import tempfile


def repack_click(unpack_dir, click_package):
    '''Repack the click package'''
    if not os.path.isdir(unpack_dir):
        cr_common.error("'%s' does not exist" % unpack_dir)
    if os.path.exists(click_package):
        cr_common.error("'%s' exists" % click_package)

    control_fn = os.path.join(unpack_dir, "DEBIAN/control")
    if not os.path.exists(control_fn):
        cr_common.error("Could not find '%s'" % control_fn)
    fh = cr_common.open_file_read(control_fn)
    tmp = list(Deb822.iter_paragraphs(fh.readlines()))
    fh.close()
    if len(tmp) != 1:
        cr_common.error("malformed control file: too many paragraphs")
    control = tmp[0]

    click_fn = "%s_%s_%s.click" % (control['Package'],
                                   control['Version'],
                                   control['Architecture'])
    if os.path.basename(click_package) != click_fn:
        cr_common.warn("'%s' should be '%s'" % (click_package, click_fn))

    tmpdir = tempfile.mkdtemp(prefix='clickreview-')
    curdir = os.getcwd()
    os.chdir(tmpdir)
    (rc, out) = cr_common.cmd(['dpkg-deb', '-b', '--nocheck',
                               os.path.abspath(unpack_dir),
                               os.path.join(tmpdir, click_fn)])
    os.chdir(curdir)
    if rc != 0:
        cr_common.recursive_rm(tmpdir)
        cr_common.error("dpkg-deb -b failed with '%d':\n%s" % (rc, out))

    debfile = glob.glob("%s/*.click" % tmpdir)[0]
    shutil.move(debfile, os.path.abspath(click_package))
    cr_common.recursive_rm(tmpdir)


if __name__ == '__main__':
    if len(sys.argv) != 3:
        cr_common.error("%s <unpacked dir> <clickpkg>" %
                        os.path.basename(sys.argv[0]))

    dir = sys.argv[1]
    pkg = sys.argv[2]

    repack_click(dir, pkg)
    print("Successfully repacked to '%s'" % pkg)
