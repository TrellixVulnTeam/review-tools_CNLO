# Environment

SNAP_DEBUG=1               - show debug info
SNAP_ENFORCE_RESQUASHFS=0  - don't enforce resquashfs tests
SNAP_FAKEROOT_RESQUASHFS=1 - use fakeroot with resquashfs tests
SNAP_DEBUG_RESQUASHFS=1    - show debug info with failed resquashfs tests
SNAP_DEBUG_RESQUASHFS=2    - drop to a shell with failed resquashfs
SNAP_FORCE_STATE_CHECK=1   - force state checks on disallowed snaps

For snap-updates-available:
RT_SEND_EMAIL=1           - enable sending emails
RT_EMAIL_FROM=<addr>      - override configured From address
RT_EMAIL_TO=<addr>        - override calculated To addresses
RT_EMAIL_SERVER=<server>  - use <server> instead of localhost
RT_EMAIL_NOPROMPT=1       - force sending of email without prompting

For extra tests:
RT_EXTRAS_PATH=/path/to/extras

# Tests

Runnable snap v2 tests:
- bin/snap-check-declaration: declaration tests
- bin/snap-check-lint: lint tests
- bin/snap-check-security: security tests
- bin/snap-run-checks: all tests

This gives an alternate view on bin/snap-run-checks:
- bin/snap-review

Running checks locally:
$ PYTHONPATH=$PWD ./bin/snap-review /path/to/package

Importable tests:
- reviewtools/sr_lint.py: lint tests
- reviewtools/sr_security.py: security tests
- ...

In general, add or modify tests and report by using:
 self._add_result(<type>, <name>, <message>)

Where <type> is one of 'info', 'warn', 'error'. <name> is the name of the
test (prefixed by <review_type>_), which is set when creating a SnapReview
object. After all tests are run, if there are any errors, the exit status is
'2', if there are no errors but some warnings, the exit status is '1',
otherwise it is '0.

See snap-check-skeleton and sr_skeleton.py for how to create new tests. In
short:
 * create a snap-check-<something> and a sr_<something>.py script based off of
   the skeleton. IMPORTANT: the new script must be snap-check-<something> so
   other tools that use review-tools (eg, ubuntu-sdk) can find them.
 * modify snap-check-<something> to use sr_<something>.py
 * add tests to sr_<something>.py. If you name the tests 'check_<sometest>'
   SnapReview.do_checks() will enumerate and run them automatically

To run tests, just execute:
$ ./run-tests                       # all tests
$ ./run-tests test_sr_security.py   # only security tests

Or to run a specific test:
$ python3 -m unittest reviewtools.tests.<filename>.<class>.<test>

Invocations for existing tests:

 * available.py
   $ python3 -m unittest reviewtools.tests.test_available.TestAvailable.foo

 * common.py
   $ python3 -m unittest reviewtools.tests.test_common.TestCommon.bar

 * debversion.py
   $ python3 -m unittest reviewtools.tests.test_debversion.TestDebVersion.baz

 * email.py
   $ python3 -m unittest reviewtools.tests.test_email.TestEmail.norf

 * modules.py
   $ python3 -m unittest reviewtools.tests.test_modules.TestModules.corge

 * sr_common.py
   $ python3 -m unittest reviewtools.tests.test_sr_common.TestSnapReviewCommon.qux

 * sr_declaration.py:
   $ python3 -m unittest reviewtools.tests.test_sr_declaration.TestSnapReviewDeclaration.test_all_checks_as_v2

 * sr_functional.py:
   $ python3 -m unittest reviewtools.tests.test_sr_functional.TestSnapReviewFunctional.test_all_checks_as_v2
   $ python3 -m unittest reviewtools.tests.test_sr_functional.TestSnapReviewFunctionalNoMock.quxx

 * sr_lint.py
   $ python3 -m unittest reviewtools.tests.test_sr_lint.TestSnapReviewLint.test_all_checks_as_v2
   $ python3 -m unittest reviewtools.tests.test_sr_lint.TestSnapReviewLintNoMock.blah

 * sr_security.py:
   $ python3 -m unittest reviewtools.tests.test_sr_security.TestSnapReviewSecurity.test_all_checks_as_v2
   $ python3 -m unittest reviewtools.tests.test_sr_security.TestSnapReviewSecurityNoMock.blah2

 * store.py
   $ python3 -m unittest reviewtools.tests.test_store.TestStore.blah3

 * usn.py
   $ python3 -m unittest reviewtools.tests.test_usn.TestUSN.blah4


Additional checks are:
$ ./run-flake8
$ ./run-black
$ ./tests/test.sh
$ ./tests/test.sh system  # requies 'review-tools' snap to be installed

All tests (except './tests/test.sh system') can be run with:
$ make check

TODO: update for git hook
If you are going to develop the tools regularly, you might want to add a bzr
hook to run the testsuite before committing. Eg, add something like this to
~/.bazaar/plugins/hooks/__init__.py:

  #!/usr/bin/python
  from bzrlib.branch import Branch

  def run_tests_rt(local, master, old_revno, old_revid, new_revno, new_revid,
                   seven, eight):
      #print local, master, old_revno, old_revid, new_revno, new_revid, seven, eight
      if 'click-reviewers-tools' in master.base:
          import subprocess
          print ''
          rc = subprocess.call(['./run-tests'])
          if rc != 0:
              import sys
              sys.exit(1)

  Branch.hooks.install_named_hook('pre_commit',
                                  run_tests_rt,
                                  'click-reviewers-tools tests')

# Releases

The review-tools historically used tags for released versions and modified
debian/changelog to include what changed for that released version. The last
released version and tag that followed this was 0.48.

Today, the review-tools no longer releases versions and instead adds a git tag
to signify something that is usable for others (eg, a stable snap, the snap
store, etc). The debian/changelog file is still used and the version in it
loosely corresponds to a given tag. Eg, if there are tags for 20190930 and
20191018, then the changelog might look like:

review-tools (0.48+YYYYMMDD-1) UNRELEASED; urgency=medium

  * new thing changed since git tag from 20191018...
  ...

review-tools (0.48+20191018-1) RELEASED; urgency=medium

  * thing changed since previous git tag
  * other thing changed since previous git tag
  ...

review-tools (0.48+20190930-1) RELEASED; urgency=medium
  ...

When it is time to issue a new git tag, the UNRELEASED entry should be updated
to have the date of the git tag and then changed to RELEASED. The general
procedure for creating a new tag is:

1. use 'dch -r' and update debian/changelog to use 0.48-YYYYMMDD-# with
   RELEASED (substituting YYYYMMDD for today's date and '#' for '1'
   (incrementing if multiple tags per day))
2. git commit debian/changelog && git push
3. Create a tag with: git tag $(date --utc "+%Y%m%d-%H%MUTC")
4. Push the tag with: git push origin $(git tag | tail -1)


# Helpful commands

Install the required snaps for the below commands:

    $ sudo snap install review-tools
    $ sudo snap disconnect review-tools:home   # optional, but good for security

To download a snap (and all of its assertions):

    $ snap download emoj
    Fetching snap "emoj"
    Fetching assertions for "emoj"
    Install the snap with:
       snap ack emoj_53.assert
       snap install emoj_53.snap

To perform a review via snap:

    $ snap-review $HOME/snap/review-tools/common/path/to/snap

(need not be in SNAP_USER_COMMON if 'home' is connected)

To unpack the snap to 'squashfs-root' in the cwd (files are owned by invoking
user unless using sudo, which isn't recommended):

    $ unsquashfs ./the.snap

Find the snap name for a given snap-id:

    $ review-tools.store-query --snap-info HjdctDwq9fm9TnLPSvUXgyXeY9zmRsB5 | grep " name:"
      name: emoj

Find the snap-id for a given snap name:

    $ review-tools.store-query --snap-info emoj | grep 'snap-id'
      snap-id: HjdctDwq9fm9TnLPSvUXgyXeY9zmRsB5

Download the snap.yaml for a given snap (and optionally channel and
architecture) from the store (defaults to latest/stable amd64):

    $ review-tools.store-query --snap-yaml emoj
    apps:
      emoj:
        command: command-emoj.wrapper
    ...

    $ review-tools.store-query --snap-yaml --channel=17.03/stable --arch=amd64 docker
    apps:
      compose:
        command: command-compose.wrapper
    ...

Download the snap-declaration for a given snap from the store:

    $ review-tools.store-query --snap-decl ufw
    ...
    plugs:
      firewall-control:
        allow-auto-connection: true
    snap-id: Jb8klqgs5djfejP5egB9Za8KYVK686Pe
    snap-name: ufw
    type: snap-declaration
    ...


# References

* https://api.snapcraft.io/docs
* https://api.snapcraft.io/docs/info.html
* https://docs.ubuntu.com/core/en/reference/assertions
* https://assertions.ubuntu.com
* https://docs.ubuntu.com/core/en/reference/rest
