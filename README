Runnable snap v2 tests:
- bin/snap-check-declaration: declaration tests
- bin/snap-check-lint: lint tests
- bin/snap-check-security: security tests
- bin/snap-run-checks: all tests

This gives an alternate view on bin/snap-run-checks:
- bin/snap-review

Running checks locally:
$ PYTHONPATH=$PWD ./bin/snap-review /path/to/package

Additional environment variables:
SNAP_DEBUG=1               - show debug info
SNAP_ENFORCE_RESQUASHFS=0  - don't enforce resquashfs tests
SNAP_FAKEROOT_RESQUASHFS=1 - use fakeroot with resquashfs tests
SNAP_DEBUG_RESQUASHFS=1    - show debug info with failed resquashfs tests
SNAP_DEBUG_RESQUASHFS=2    - drop to a shell with failed resquashfs

For snap-updates-available:
RT_SEND_EMAIL=1           - enable sending emails
RT_EMAIL_FROM=<addr>      - override configured From address
RT_EMAIL_TO=<addr>        - override calculated To addresses
RT_EMAIL_SERVER=<server>  - use <server> instead of localhost
RT_EMAIL_NOPROMPT=1       - force sending of email without prompting

Importable tests:
- reviewtools/sr_lint.py: lint tests
- reviewtools/sr_security.py: security tests
- ...

In general, add or modify tests and report by using:
 self._add_result(<type>, <name>, <message>)

Where <type> is one of 'info', 'warn', 'error'. <name> is the name of the
test (prefixed by <review_type>_), which is set when creating a SnapReview
object. After all tests are run, if there are any errors, the exit status is
'2', if there are no errors but some warnings, the exit status is '1',
otherwise it is '0.

See snap-check-skeleton and sr_skeleton.py for how to create new tests. In
short:
 * create a snap-check-<something> and a sr_<something>.py script based off of
   the skeleton. IMPORTANT: the new script must be snap-check-<something> so
   other tools that use review-tools (eg, ubuntu-sdk) can find them.
 * modify snap-check-<something> to use sr_<something>.py
 * add tests to sr_<something>.py. If you name the tests 'check_<sometest>'
   SnapReview.do_checks() will enumerate and run them automatically

To run tests, just execute:
$ ./run-tests                       # all tests
$ ./run-tests test_sr_security.py   # only security tests

Or to run a specific test:
$ python3 -m unittest reviewtools.tests.<filename>.<class>.<test>

Eg:
$ python3 -m unittest reviewtools.tests.test_sr_lint.TestSnapReviewLint.test_all_checks_as_v2

Additional checks are:
$ ./run-pep8
$ ./run-pyflakes
$ ./tests/test.sh
$ ./tests/test.sh system  # requies 'review-tools' snap to be installed

All tests (except './tests/test.sh system') can be run with:
$ make check

TODO: update for git hook
If you are going to develop the tools regularly, you might want to add a bzr
hook to run the testsuite before committing. Eg, add something like this to
~/.bazaar/plugins/hooks/__init__.py:

  #!/usr/bin/python
  from bzrlib.branch import Branch

  def run_tests_rt(local, master, old_revno, old_revid, new_revno, new_revid,
                   seven, eight):
      #print local, master, old_revno, old_revid, new_revno, new_revid, seven, eight
      if 'click-reviewers-tools' in master.base:
          import subprocess
          print ''
          rc = subprocess.call(['./run-tests'])
          if rc != 0:
              import sys
              sys.exit(1)

  Branch.hooks.install_named_hook('pre_commit',
                                  run_tests_rt,
                                  'click-reviewers-tools tests')

