# Environment

SNAP_DEBUG=1               - show debug info
SNAP_ENFORCE_RESQUASHFS=0  - don't enforce resquashfs tests
SNAP_FAKEROOT_RESQUASHFS=1 - use fakeroot with resquashfs tests
SNAP_DEBUG_RESQUASHFS=1    - show debug info with failed resquashfs tests
SNAP_DEBUG_RESQUASHFS=2    - drop to a shell with failed resquashfs

For snap-updates-available:
RT_SEND_EMAIL=1           - enable sending emails
RT_EMAIL_FROM=<addr>      - override configured From address
RT_EMAIL_TO=<addr>        - override calculated To addresses
RT_EMAIL_SERVER=<server>  - use <server> instead of localhost
RT_EMAIL_NOPROMPT=1       - force sending of email without prompting

For extra tests:
RT_EXTRAS_PATH=/path/to/extras

# Tests

Runnable snap v2 tests:
- bin/snap-check-declaration: declaration tests
- bin/snap-check-lint: lint tests
- bin/snap-check-security: security tests
- bin/snap-run-checks: all tests

This gives an alternate view on bin/snap-run-checks:
- bin/snap-review

Running checks locally:
$ PYTHONPATH=$PWD ./bin/snap-review /path/to/package

Importable tests:
- reviewtools/sr_lint.py: lint tests
- reviewtools/sr_security.py: security tests
- ...

In general, add or modify tests and report by using:
 self._add_result(<type>, <name>, <message>)

Where <type> is one of 'info', 'warn', 'error'. <name> is the name of the
test (prefixed by <review_type>_), which is set when creating a SnapReview
object. After all tests are run, if there are any errors, the exit status is
'2', if there are no errors but some warnings, the exit status is '1',
otherwise it is '0.

See snap-check-skeleton and sr_skeleton.py for how to create new tests. In
short:
 * create a snap-check-<something> and a sr_<something>.py script based off of
   the skeleton. IMPORTANT: the new script must be snap-check-<something> so
   other tools that use review-tools (eg, ubuntu-sdk) can find them.
 * modify snap-check-<something> to use sr_<something>.py
 * add tests to sr_<something>.py. If you name the tests 'check_<sometest>'
   SnapReview.do_checks() will enumerate and run them automatically

To run tests, just execute:
$ ./run-tests                       # all tests
$ ./run-tests test_sr_security.py   # only security tests

Or to run a specific test:
$ python3 -m unittest reviewtools.tests.<filename>.<class>.<test>

Eg:
$ python3 -m unittest reviewtools.tests.test_sr_lint.TestSnapReviewLint.test_all_checks_as_v2

Additional checks are:
$ ./run-pep8
$ ./run-pyflakes
$ ./tests/test.sh
$ ./tests/test.sh system  # requies 'review-tools' snap to be installed

All tests (except './tests/test.sh system') can be run with:
$ make check

TODO: update for git hook
If you are going to develop the tools regularly, you might want to add a bzr
hook to run the testsuite before committing. Eg, add something like this to
~/.bazaar/plugins/hooks/__init__.py:

  #!/usr/bin/python
  from bzrlib.branch import Branch

  def run_tests_rt(local, master, old_revno, old_revid, new_revno, new_revid,
                   seven, eight):
      #print local, master, old_revno, old_revid, new_revno, new_revid, seven, eight
      if 'click-reviewers-tools' in master.base:
          import subprocess
          print ''
          rc = subprocess.call(['./run-tests'])
          if rc != 0:
              import sys
              sys.exit(1)

  Branch.hooks.install_named_hook('pre_commit',
                                  run_tests_rt,
                                  'click-reviewers-tools tests')

# Releases

The review-tools historically used tags for released versions and modified
debian/changelog to include what changed for that released version. The last
released version and tag that followed this was 0.48.

Today, the review-tools no longer releases versions and instead adds a git tag
to signify something that is usable for others (eg, a stable snap, the snap
store, etc). The debian/changelog file is still used and the version in it
loosely corresponds to a given tag. Eg, if there are tags for 20190930 and
20191018, then the changelog might look like:

review-tools (0.48+YYYYMMDD-1) UNRELEASED; urgency=medium

  * new thing changed since git tag from 20191018...
  ...

review-tools (0.48+20191018-1) RELEASED; urgency=medium

  * thing changed since previous git tag
  * other thing changed since previous git tag
  ...

review-tools (0.48+20190930-1) RELEASED; urgency=medium
  ...

When it is time to issue a new git tag, the UNRELEASED entry should be updated
to have the date of the git tag and then changed to RELEASED. The general
procedure for creating a new tag is:

1. use 'dch -r' and update debian/changelog to use 0.48-YYYYMMDD-# with
   RELEASED (substituting YYYYMMDD for today's date and '#' for '1'
   (incrementing if multiple tags per day))
2. git commit debian/changelog && git push
3. Create a tag with: git tag $(date --utc "+%Y%m%d-%H%MUTC")
4. Push the tag with: git push origin $(git tag | tail -1)


# Helpful commands

Install the required snaps for the below commands:
$ sudo snap install review-tools
$ sudo snap disconnect review-tools:home   # optional, but good for security
$ sudo snap install http
$ sudo snap install jq
$ sudo snap install what-snap

To download a snap (and all of its assertions):
$ snap download emoj
Fetching snap "emoj"
Fetching assertions for "emoj"
Install the snap with:
   snap ack emoj_53.assert
   snap install emoj_53.snap

To perform a review via snap:
$ snap-review $HOME/snap/review-tools/common/path/to/snap
(need not be in SNAP_USER_COMMON if 'home' is connected)

To unpack the snap to 'squashfs-root' in the cwd (files are owned by invoking
user unless using sudo, which isn't recommended):
$ unsquashfs ./the.snap

Find the snap name for a given snap-id:
$ what-snap HjdctDwq9fm9TnLPSvUXgyXeY9zmRsB5
HjdctDwq9fm9TnLPSvUXgyXeY9zmRsB5: emoj

Find the snap-id for a given snap name:
$ SNAPNAME=emoj ; http https://api.snapcraft.io/v2/snaps/info/$SNAPNAME Snap-Device-Series:16 | jq -r '."snap-id"'
HjdctDwq9fm9TnLPSvUXgyXeY9zmRsB5

Download the snap.yaml for a given snap (and architecture) from the store (uses latest revision):
$ SNAPNAME=emoj ; http https://api.snapcraft.io/v2/snaps/info/$SNAPNAME Snap-Device-Series:16 architecture==amd64 fields==snap-yaml | jq -r '."channel-map"[0]."snap-yaml"'

name: emoj
version: v2.0.0
...

Download the snap declaration for a given snap from the store:
$ snap known --remote snap-declaration series=16 snap-id=HjdctDwq9fm9TnLPSvUXgyXeY9zmRsB5
type: snap-declaration
authority-id: canonical
series: 16
snap-id: HjdctDwq9fm9TnLPSvUXgyXeY9zmRsB5
publisher-id: ekRMaarzOfN1Vu3sDY0Bt1aGnM8Cd4kG
snap-name: emoj
...


# References

https://docs.ubuntu.com/core/en/reference/rest

What distros support reexec: snapd.git/cmd/cmd_linux.go
(distroSupportsReExec()) (as of 2019-10-15, only Ubuntu and Debian)

## Cross-distro
https://snapcraft.io/docs/installing-snapd

Arch: https://aur.archlinux.org/packages/snapd/
CentOS: https://dl.fedoraproject.org/pub/epel/7/SRPMS/Packages/s/ (where '7' is the CentOS/RHEL version)
Debian: https://packages.debian.org/search?suite=all&section=all&arch=any&searchon=sourcenames&keywords=snapd
Elementary: based on Ubuntu LTS
Fedora: https://dl.fedoraproject.org/pub/fedora/linux/updates/30/Everything/SRPMS/Packages/s/ (where '30' is the Fedora version)
GalliumOS: fork of Ubuntu LTS but uses the Ubuntu archive with PPAs
KDE Neon: fork of Ubuntu LTS but uses the Ubuntu archive with PPAs
Kubuntu: Ubuntu flavor
Lubuntu: Ubuntu flavor
Manjaro: http://distro.ibiblio.org/manjaro/stable/extra/x86_64/
Mint: fork of Ubuntu
OpenSUSE: https://build.opensuse.org/package/show/system:snappy/snapd
Parrot OS: https://deb.parrot.sh/parrot/pool/main/s/snapd/
Pop_OS!: based on Ubuntu
Raspbian: http://archive.raspbian.org/raspbian/pool/main/s/snapd/
Solus: https://mirrors.rit.edu/solus/packages/shannon/s/snapd/ (where 'shannon' is the Solus version)
Ubuntu: https://launchpad.net/ubuntu/+source/snapd
Xubuntu: Ubuntu flavor
Zorin: fork of Ubuntu LTS but uses the Ubuntu archive with PPAs
